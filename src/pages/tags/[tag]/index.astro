---
import { getCollection, type CollectionEntry } from "astro:content";
import getUniqueTags from "@utils/getUniqueTags";
import getPostsByTag from "@utils/getPostsByTag";
import type { Page } from "astro";
import { SITE } from "@config";
import TagPosts from "@layouts/TagPosts.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const tags = getUniqueTags(posts);

  return tags.map(({ tag, tagName }) => {
    const tagPosts = getPostsByTag(posts, tag);
    return {
      params: { tag },
      props: { posts: tagPosts, tagName },
    };
  });
}

const { tag } = Astro.params;
const { posts, tagName } = Astro.props;
const firstPagePosts = posts.slice(0, SITE.postPerPage);

const page = {
  data: firstPagePosts,
  start: 0,
  end: firstPagePosts.length,
  total: posts.length,
  lastPage: Math.ceil(posts.length / SITE.postPerPage),
  currentPage: 1,
  size: SITE.postPerPage,
  url: {
    current: `/tags/${tag}/`,
    prev: undefined,
    next: posts.length > SITE.postPerPage ? `/tags/${tag}/2` : undefined,
    first: `/tags/${tag}/1`,
    last: `/tags/${tag}/${Math.ceil(posts.length / SITE.postPerPage)}`,
  },
} satisfies Page<CollectionEntry<"blog">>;
---

<TagPosts {page} {tag} {tagName} />
